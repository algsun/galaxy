<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="blueplanet.mybatis.LocationDao">

    <sql id="excludeLocations">
        <![CDATA[
        AND l.id NOT IN ('10000201102426', '10000201102427', '10000201102428', '10000201102429')
        ]]>
    </sql>

    <!--查询位置点-->
    <select id="findLocationById" parameterType="java.lang.String"
            resultType="LocationVO">
        <![CDATA[
            SELECT
              id,
              locationName,
              nodeId,
              zoneId,
              siteId,
              createTime,
              type,
              remark,
              photo,
              lng,
              lat
            FROM
              m_location
            WHERE id = #{locationId}
        ]]>
    </select>

    <!-- 查询站点下所有位置点 -->
    <select id="findLocationsBySiteId" parameterType="java.lang.String"
            resultType="LocationVO">
        <![CDATA[
            SELECT
              id,
              locationName,
              nodeId,
              zoneId,
              siteId,
              createTime,
              type,
              remark
            FROM
              m_location l
            WHERE siteId = #{siteId}
        ]]>
        <include refid="excludeLocations"/>
    </select>

    <!-- 查询站点下所有位置点 -->
    <select id="findLocationsBySiteIdAndLocationName" parameterType="java.lang.String"
            resultType="LocationVO">
        <![CDATA[
            SELECT
              id,
              locationName,
              nodeId,
              zoneId,
              siteId,
              createTime,
              type,
              remark
            FROM
              m_location l
            WHERE siteId = #{siteId}
        ]]>
        <include refid="excludeLocations"/>
        <if test="locationName != null">
            AND locationName LIKE '%${locationName}%'
        </if>

    </select>

    <!-- 查询站点下所有位置点 -->
    <select id="findOneLocationsBySiteIdAndLocationName" parameterType="java.lang.String"
            resultType="LocationVO">
        <![CDATA[
            SELECT
              id,
              locationName,
              nodeId,
              zoneId,
              siteId,
              createTime,
              type,
              remark
            FROM
              m_location l
            WHERE siteId = #{siteId} AND locationName = #{locationName}
        ]]>
        <include refid="excludeLocations"/>
    </select>

    <!-- 查询区域下所有位置点 -->
    <select id="findLocationsByZoneId" parameterType="java.lang.String" resultType="LocationVO">
        <![CDATA[
            SELECT
              id,
              locationName,
              nodeId,
              zoneId,
              siteId,
              createTime,
              type,
              remark,
              photo,
              lng,
              lat
            FROM
              m_location l
            WHERE zoneId = #{zoneId}
        ]]>
        <include refid="excludeLocations"/>
    </select>

    <!-- 查询区域下所有位置点ID -->
    <select id="findLocationIdsByZoneId" parameterType="java.lang.String" resultType="java.lang.String">
        <![CDATA[
            SELECT
              id
            FROM
              m_location l
            WHERE zoneId = #{zoneId}
        ]]>
        <include refid="excludeLocations"/>
    </select>

    <select id="findLocationSensorIdList" parameterType="java.lang.String"
            resultType="java.lang.Integer">
        <![CDATA[
            SELECT
              mls.sensorPhysicalid
            FROM
              m_location_sensor mls INNER JOIN `m_sensorinfo` AS ms ON ms.`sensorPhysicalid`=mls.`sensorPhysicalId`
            WHERE mls.locationId = #{locationId}
        ]]>
    </select>

    <select id="findSensorInfoList" parameterType="java.util.HashMap"
            resultType="SensorinfoVO">
        <![CDATA[
            SELECT
              ms.sensorPhysicalid,
              ms.en_name AS enName,
              ]]>
              <if test="language=='en_US'">
                  ms.en_name AS cnName,
              </if>
              <if test="language=='zh_CN'">
                  ms.cn_name AS cnName,
              </if>
              <![CDATA[
              ms.sensorPrecision,
              ms.units,
              ms.positions,
              ms.isActive,
              ms.showType
            FROM
              m_location_sensor mls,
              m_sensorinfo ms
            WHERE mls.sensorPhysicalid = ms.sensorPhysicalid
              AND mls.locationId = #{locationId}
        ]]>
    </select>

    <!-- 查询一个位置点历史数据中最近的一条历史数据 -->
    <select id="findRecentlyLocation" resultType="LocationHistoryPO" parameterType="java.lang.String">
        <![CDATA[
            SELECT * FROM m_location_history m
            WHERE m.locationId = #{value}
            ORDER BY m.startTime DESC
            LIMIT 1
        ]]>
    </select>

    <!-- 查询一个位置点已经激活的检测指标对应的实时数据值 -->
    <select id="findLocationSensor" resultType="LocationDataVO"
            parameterType="java.util.Map">
        <![CDATA[
			SELECT DISTINCT
              mls.sensorPhysicalid    AS sensorPhysicalid,
              mls.sensorPhysicalValue AS sensorPhysicalValue,
              mls.state               AS state,
              n.showType              AS showType,
              n.cn_name               AS cnName,
              n.en_name               AS enName,
              mls.stamp               AS stamp,
              n.units                 AS units,
              t.conditionType,
              t.target,
              t.floating
            FROM
              m_location_sensor AS mls
              LEFT JOIN m_sensorinfo AS n ON mls.sensorPhysicalid = n.sensorPhysicalid
              LEFT JOIN m_threshold AS t ON mls.locationId = t.locationId AND mls.sensorPhysicalId = t.sensorPhysicalId
            WHERE n.isActive = 1 AND mls.locationId =  #{locationId}
		]]>
        <if test="sensorPhysicalIdList !=null">
            AND
            mls.sensorPhysicalid
            IN
            <foreach collection="sensorPhysicalIdList" index="index"
                     item="item" open="(" separator="," close=")">
                #{item}
            </foreach>
        </if>
        ORDER BY mls.stamp DESC
    </select>

    <!-- 分页查询站点下所有位置点 -->
    <select id="findLocationList" parameterType="java.util.Map"
            resultType="LocationVO">
        <![CDATA[
            SELECT
              id,
              locationName,
              nodeId,
              zoneId,
              siteId,
              createTime,
              type,
              remark
            FROM
              m_location l
            WHERE siteId = #{siteId}
              AND type = 0
        ]]>
        <include refid="excludeLocations"/>
        <![CDATA[
            ORDER BY id desc
            LIMIT #{begin},#{pageSize}
        ]]>
    </select>


    <!-- 根据zoneId和locationName查询位置点 -->
    <select id="findLocationByNameAndZone" parameterType="java.util.Map"
            resultType="LocationVO">
        <![CDATA[
            SELECT
              id,
              locationName,
              nodeId,
              zoneId,
              siteId,
              createTime,
              type,
              remark
            FROM
              m_location l
            WHERE siteId = #{siteId}
            AND type = 0
        ]]>
        <include refid="excludeLocations"/>
        <if test="zoneId!=null">
         AND zoneId = #{zoneId}
        </if>

        <if test="locationName!=null">
         AND locationName LIKE  '%${locationName}%'
        </if>
        <![CDATA[
         ORDER BY
           id desc
           LIMIT #{begin},#{pageSize}
        ]]>
    </select>

    <!-- 根据zoneId和locationName查询位置点 -->
    <select id="findLocationByNameAndZoneCount" parameterType="java.util.Map"
            resultType="int">
        <![CDATA[
            SELECT
            COUNT(id)
            FROM
              m_location l
            WHERE siteId = #{siteId}
            AND type = 0
        ]]>
        <include refid="excludeLocations"/>
        <if test="zoneId != null">
            AND zoneId = #{zoneId}
        </if>

        <if test="locationName != null">
            AND locationName LIKE '%${locationName}%'
        </if>

    </select>


    <!-- 查询位置点数目 -->
    <select id="findLocationListCount" parameterType="java.lang.String"
            resultType="java.lang.Integer">
        <![CDATA[
            SELECT
             COUNT(id)
            FROM
              m_location l
            WHERE
            siteId = #{value}
            AND type = 0
        ]]>
        <include refid="excludeLocations"/>
    </select>


    <!-- 查询最大的位置点编号 -->
    <select id="getMaxLocationId" parameterType="java.lang.String"
            resultType="java.lang.String">
        <![CDATA[
            SELECT
              MAX(id)
            FROM
              `m_location` l
            WHERE l.`siteId` = #{siteId}
        ]]>
        <include refid="excludeLocations"/>
    </select>

    <!-- 添加位置点信息 -->
    <insert id="addLocation" parameterType="LocationPO">
        <![CDATA[
             INSERT INTO `m_location`
                (
                      id,
                      locationName,
                      nodeId,
                      zoneId,
                      siteId,
                      createTime,
                      TYPE,
                      remark,
                      photo,
                      lng,
                      lat
                )
                VALUES
                  (
                      #{id},
                      #{locationName},
                      #{nodeId},
                      #{zoneId},
                      #{siteId},
                      current_timestamp,
                      #{type},
                      #{remark},
                      #{photo},
                      #{lng},
                      #{lat}
                  )
        ]]>
    </insert>

    <!-- 添加位置点信息 -->
    <insert id="addLocationRelic" parameterType="java.util.HashMap">
        <![CDATA[
             INSERT INTO `m_location_relic` (locationId, relicId)
             VALUES (#{locationId}, #{relicId})
        ]]>
    </insert>

    <select id="findRelics" parameterType="java.lang.String" resultType="Relic">
        <![CDATA[
        SELECT
          mlr.`id` AS locationRelicId,
          osr.`id`,
          osr.`name`,
          osr.`totalCode`
        FROM
          `o_historical_relic` AS osr
        INNER JOIN `m_location_relic` AS mlr
        ON osr.`id` = mlr.`relicId` WHERE mlr.`locationId` = #{locationId}
        ]]>
    </select>

    <delete id="deleteLocationRelic" parameterType="java.lang.Integer">
        DELETE FROM `m_location_relic` WHERE `id` = #{id};
    </delete>

    <delete id="deleteLocationRelicByLocationId" parameterType="String">
        DELETE FROM `m_location_relic` WHERE `locationId` = #{value};
    </delete>

    <insert id="addLocationHistory" parameterType="java.util.HashMap">
        <![CDATA[
             INSERT INTO `m_location_history`
                (
                      id,
                      locationId,
                      nodeId,
                      startTime
                )
                VALUES
                  (
                     (SELECT UUID()),
                      #{locationId},
                      #{nodeId},
                      #{startTime}
                  )
        ]]>
    </insert>

    <delete id="deleteLocation" parameterType="java.lang.String">
        <![CDATA[
             DELETE FROM m_location WHERE id = #{locationId}
        ]]>
    </delete>

    <delete id="deleteLocationHistory" parameterType="java.lang.String">
        <![CDATA[
             DELETE FROM m_location_history WHERE locationId = #{locationId}
        ]]>
    </delete>

    <update id="updateLocationHistoryEndTime" parameterType="java.util.HashMap">
        <![CDATA[
            UPDATE
              m_location_history
            SET
              endTime = #{endTime}
            WHERE locationId = #{locationId}
            AND nodeId = #{nodeId}
            AND endTime is NULL
        ]]>
    </update>

    <update id="updateLocation" parameterType="java.util.HashMap">
             UPDATE
                m_location
             SET
                    nodeId = #{nodeId}
                    <if test="locationName != null">,locationName = #{locationName}</if>
                    <if test="zoneId != null">,zoneId = #{zoneId}</if>
                    <if test="createTime != null">,createTime = #{createTime}</if>
                    <if test="photo != null">,photo = #{photo}</if>
                    <if test="remark != null">,remark = #{remark}</if>
                    <if test="lng != null">,lng = #{lng}</if>
                    <if test="lat != null">,lat = #{lat}</if>
             WHERE
                id = #{id}
    </update>

    <update id="deployLocation" parameterType="java.util.HashMap">
        UPDATE
          m_location
        SET
          zoneId = #{zoneId}
        WHERE
          id
        IN
        <foreach item="locationId" index="index" collection="locationIds" open="(" separator="," close=")">
            #{locationId}
        </foreach>
    </update>

    <update id="unDeployLocation" parameterType="java.lang.String">
        UPDATE
          m_location
        SET
          zoneId = null
        WHERE
          id = #{locationId}
    </update>

    <!-- 创建位置点数据表 -->
    <update id="createLocationTable" parameterType="java.lang.String">
        <![CDATA[
		   	CREATE TABLE IF NOT EXISTS `${value}` (
                id INT(11) NOT NULL AUTO_INCREMENT,
                nodeid VARCHAR(20) NOT NULL COMMENT '产品入网唯一标识',
                sensorPhysicalid INT(11) NOT NULL COMMENT '传感标识',
                sensorPhysicalvalue VARCHAR(30) NOT NULL COMMENT '传感值',
                lowvoltage FLOAT NOT NULL DEFAULT 0 COMMENT '电压值(默认为0)',
                createtime DATETIME NOT NULL COMMENT '创建时间',
                state INT(11) NOT NULL COMMENT '传感状态0：采样失败,1：采样正常,2：低于低阀值,3：超过高阀值,4：空数据',
                dataVersion INT(11) DEFAULT 0 COMMENT '数据版本',
                anomaly INT(11) NOT NULL DEFAULT '0' COMMENT '-1：超时,0：正常,1：低压,2：掉电',
                PRIMARY KEY  (id),
                INDEX(createtime),
                CONSTRAINT ${value}physicalIdTime UNIQUE(sensorPhysicalid,createtime)
               )ENGINE=INNODB DEFAULT CHARSET=utf8 COMMENT='节点数据表';
		 ]]>
	</update>

    <!-- 删除位置点表 -->
    <update id="deleteLocationTable" parameterType="java.lang.String">
        <![CDATA[
                DROP  TABLE  if  EXISTS  `${value}`;
		 ]]>
	</update>

    <!-- 删除位置点坐标信息 -->
    <delete id="deleteCoordinate" parameterType="java.lang.String">
        <![CDATA[
             DELETE FROM m_coordinate WHERE locationId = #{locationId};
		 ]]>
	</delete>

    <delete id="deleteLocationSensor" parameterType="java.lang.String">
        <![CDATA[
             DELETE FROM m_location_sensor WHERE locationId = #{locationId};
		 ]]>
	</delete>

    <delete id="deleteLocationStock" parameterType="java.lang.String">
        <![CDATA[
             DELETE FROM m_stock WHERE locationId = #{locationId};
		 ]]>
	</delete>

    <select id="findNodeIdByLocationId" parameterType="string" resultType="string">
        <![CDATA[
              SELECT
                nodeId
              FROM
                `m_location`
              WHERE id = #{value}
        ]]>
    </select>

    <select id="findLocationHistoryList" parameterType="string" resultType="LocationHistoryVO">
        <![CDATA[
              SELECT
                ml.*
              FROM
                `m_location_history` AS ml
              LEFT JOIN `m_nodeinfo` AS mn
              ON ml.`nodeId` = mn.`nodeid`
              WHERE locationId = #{value}
              ORDER BY startTime DESC
        ]]>
    </select>


    <!-- 判断位置点名称是否重复 -->
    <select id="isExistLocationName" parameterType="java.util.Map" resultType="java.lang.Integer">
        <![CDATA[
            SELECT
              COUNT(0)
            FROM
              m_location m
            WHERE m.`locationName` = #{locationName}
            AND m.siteId = #{siteId}
        ]]>
    </select>

    <!-- 判断位置点名称是否重复 -->
    <select id="isExistLocationNameExceptSelf" parameterType="java.util.Map" resultType="java.lang.Integer">
        <![CDATA[
            SELECT
              COUNT(0)
            FROM
              m_location m
            WHERE m.`locationName` = #{locationName}
            AND m.id <> #{locationId}
            AND m.siteId = #{siteId};
        ]]>
    </select>

      <select id="findRecentDataList" parameterType="java.util.Map" resultType="RecentDataVO">
        <![CDATA[
	        SELECT
		      b.createtime AS stamp,
		      b.lowvoltage AS lowvoltage,
		      b.anomaly AS anomaly
		    FROM
		      `${locationId}` AS b
		    WHERE b.state != 5
		    GROUP BY b.createtime
		    ORDER BY b.createtime desc
            LIMIT ${dataCount}
		]]>
    </select>

    <select id="findStampList_startTime" parameterType="java.util.Map"
            resultType="RecentDataVO">
        <![CDATA[
	        SELECT
		      b.createtime AS stamp,
		      b.lowvoltage AS lowvoltage,
		      b.anomaly AS anomaly
		    FROM
		      `${locationId}` AS b
		    WHERE
		      b.state != 5
		      AND
		      b.createtime >=#{startTime}
		    GROUP BY b.createtime
		    ORDER BY b.createtime  desc
		]]>
    </select>


    <select id="findStampList_startTime_endTime" parameterType="java.util.Map"
            resultType="RecentDataVO">
        <![CDATA[
	        SELECT
	          b.nodeid AS deviceId,
		      b.createtime AS stamp,
		      b.lowvoltage AS lowvoltage,
		      b.anomaly AS anomaly
		    FROM
		      `${locationId}` AS b
		    WHERE
		      b.createtime >=#{startTime}
		     AND
		     b.createtime <=#{endTime} AND b.state != 5
		    GROUP BY b.createtime
		    ORDER BY b.createtime
		    LIMIT #{begin},#{pageSize}
		]]>
    </select>


    <select id="findHistoryDataList_startTime_endTime_desc" parameterType="java.util.Map"
            resultType="RecentDataVO">
        <![CDATA[
	        SELECT
	          b.nodeid AS deviceId,
		      b.createtime AS stamp,
		      b.lowvoltage AS lowvoltage,
		      b.anomaly AS anomaly
		    FROM
		      `${locationId}` AS b
		    WHERE
		      b.createtime >=#{startTime}
		     AND
		     b.createtime <=#{endTime} AND b.state != 5
		    GROUP BY b.createtime
		    ORDER BY b.createtime  DESC
		    LIMIT #{begin},#{pageSize}
		]]>
    </select>

    <select id="findRecentDataList_startTime_endTime" parameterType="java.util.Map"
            resultType="RecentDataVO">
        <![CDATA[
	        SELECT
	          b.nodeid AS deviceId,
		      b.createtime AS stamp,
		      b.lowvoltage AS lowvoltage,
		      b.anomaly AS anomaly
		    FROM
		      `${locationId}` AS b
		    WHERE
		      b.createtime >=#{startTime}
		     AND
		     b.createtime <=#{endTime}
		    GROUP BY b.createtime
		    ORDER BY b.createtime
		]]>
    </select>

    <select id="findStampList_startTime_endTime_count" parameterType="java.util.Map"
            resultType="int">
        <![CDATA[
           SELECT
            COUNT(1)
             FROM(
	        SELECT
	         b.createtime AS stamp
		    FROM
		      `${locationId}` AS b
		    WHERE
		       b.state != 5 AND b.createtime BETWEEN #{startTime} AND #{endTime}
		    GROUP BY b.createtime )
		    a
		]]>
    </select>

    <select id="findLocationHistoryData" resultType="LocationDataVO"
            parameterType="java.util.Map">
        <![CDATA[

		    SELECT
              temp.*,
              t.conditionType,
              t.target,
              t.floating
            FROM (SELECT
                     #{locationId} AS locationId,
                     a.sensorPhysicalid    AS sensorPhysicalid,
                     a.sensorPhysicalvalue AS sensorPhysicalvalue,
                     a.createtime          AS stamp,
                     a.state               AS state,
       ]]>
        <if test="language=='en_US'">
            s.en_name AS cnName,
        </if>
        <if test="language=='zh_CN'">
            s.cn_name AS cnName,
        </if>
        <![CDATA[
                      s.`units`             as units,
                      s.showType            AS showType
                   FROM
                      `${locationId}` AS a
                   LEFT JOIN
                      m_sensorinfo AS s ON s.sensorPhysicalid = a.sensorPhysicalid
                   WHERE
                      a.createtime=#{date}
                   GROUP BY a.sensorPhysicalid
                   ORDER BY a.createtime) temp
          LEFT JOIN m_threshold t
          ON temp.locationId = t.locationId AND temp.sensorPhysicalid = t.sensorPhysicalId
        ]]>
    </select>

    <select id="findLocationSensorPre" parameterType="java.util.Map" resultType="LocationDataVO">
        <![CDATA[
          SELECT
              a.sensorPhysicalid    AS sensorPhysicalid,
              a.sensorPhysicalvalue As sensorPhysicalvalue,
              a.createtime          AS stamp,
              a.state               AS state,
              s.`cn_name`           as cnName,
              s.`units`             as units,
              s.showType            AS showType
           FROM
              `${locationId}` AS a
           LEFT JOIN
              m_sensorinfo AS s ON s.sensorPhysicalid = a.sensorPhysicalid
           WHERE
              s.sensorPhysicalid=#{sensorId}
           AND
              a.createtime>=#{stamp}
           ORDER BY
              a.createtime
           ASC LIMIT 1
        ]]>
    </select>
    <select id="findLocationSensorNext" parameterType="java.util.Map" resultType="LocationDataVO">
        <![CDATA[
          SELECT
              a.sensorPhysicalid    AS sensorPhysicalid,
              a.sensorPhysicalvalue As sensorPhysicalvalue,
              a.createtime          AS stamp,
              a.state               AS state,
              s.`cn_name`           as cnName,
              s.`units`             as units,
              s.showType            AS showType
           FROM
              `${locationId}` AS a
           LEFT JOIN
              m_sensorinfo AS s ON s.sensorPhysicalid = a.sensorPhysicalid
           WHERE
              s.sensorPhysicalid=#{sensorId}
           AND
              a.createtime<=#{stamp}
           ORDER BY
              a.createtime
           DESC LIMIT 1
        ]]>
    </select>

    <select id="findUnbindDevices" parameterType="java.util.Map"
            resultType="DeviceVO">
        <![CDATA[
           SELECT
              n.nodeid AS nodeId,
              n.nodeType AS nodeType,
              m.lowvoltage AS lowvoltage,
              m.lqi AS lqi,
              m.stamp AS stamp,
              m.anomaly AS anomaly,
              m.deviceMode AS deviceMode,
              m.rssi AS rssi
            FROM
              m_nodeinfo n
              INNER JOIN m_nodeinfomemory m
                ON m.nodeid = n.nodeid
              LEFT JOIN m_location l
                ON n.`nodeid` = l.`nodeId`
            WHERE n.siteId = #{siteId}
              AND l.`nodeId` IS NULL
        ]]>
    </select>

    <!-- 查询当前时间段内有数据的年 -->
    <select id="getExcelSum" parameterType="java.util.Map"
            resultType="Integer">
		<![CDATA[

		  SELECT DISTINCT
		     YEAR(a.`createtime`)
		  FROM
		    `${locationId}`AS a
		  WHERE
		     a.`createtime`>=#{startTime}
		  AND
		     a.`createtime`<=#{endTime}

        ]]>
	</select>


    <!-- 查询最大和最小时间为查询设备历史数据表做查询条件 -->
    <select id="findMaxAndMinTime" resultType="java.util.Map"
            parameterType="java.util.Map">
        <![CDATA[
		  	SELECT
				 min(b.createtime) AS minTime,
				 max(b.createtime) AS maxTime
			FROM
			   (SELECT
			          a.createtime
			        FROM
				 `${locationId}`  AS a
		 ]]>
        <if
                test="endTime!=null and endTime!='' and startTime!=null and startTime!=''">
            <![CDATA[
		     WHERE
		         a.createtime <=#{endTime}
		     AND a.createtime >=#{startTime}
		 ]]>
        </if>

        <![CDATA[
				GROUP BY
				  a.createtime
				ORDER BY
				  a.createtime DESC
		 ]]>
        <if test="start!=null and pageSize!=null">
            LIMIT #{start},#{pageSize}
        </if>
        ) AS b

    </select>

    <select id="findAverageAndPeakValue" parameterType="java.util.Map" resultType="AvgdataPO">
        <![CDATA[
            SELECT
              m.id               AS id,
              m.nodeid           AS nodeid,
              m.sensorPhysicalid AS sensorPhysicalid,
              m.maxValue,
              m.maxTime          AS maxTime,
              m.minValue         AS minValue,
              m.minTime          AS minTime,
              m.avgValue         AS avgValue,
              m.waveValue        AS waveValue,
              m.ms_date          AS msDate
            FROM
              `m_avgdata` m
            WHERE
              m.nodeid = #{locationId}
            AND
              m.ms_date >= #{startDate}
		    AND
		      m.ms_date <= #{endDate}
		    ORDER BY
		      m.ms_date
            ASC
        ]]>
    </select>


    <select id="findLocationSensorInfo" parameterType="java.lang.String" resultType="LocationAvgdataVO">
        <![CDATA[
              SELECT
                mls.sensorPhysicalid AS sensorPhysicalid,
                ms.cn_name AS cnName,
                ms.units AS units
              FROM
                m_location_sensor AS mls,
                m_sensorinfo AS ms
              WHERE ms.sensorPhysicalid = mls.sensorPhysicalid
              AND mls.locationId = #{value}
        ]]>
    </select>


    <select id="findAvgData" parameterType="java.util.Map" resultType="java.util.Map">
        <![CDATA[
          SELECT DISTINCT
		a.`ms_date` AS `date`,
	    AVG(a.`avgValue`)AS avgValue
		FROM
		  m_avgdata a
		WHERE a.`nodeid` = #{locationId}
		AND a.`sensorPhysicalid` = #{sensorPhysicalId}
		AND a.`ms_date` >= #{startDate}
		AND a.`ms_date` <= #{endDate}
		GROUP BY a.`ms_date`
		ORDER BY `date`
        ]]>
    </select>

    <!-- 查询某个设备某个监测指标在指定时刻附近的一条数据 -->
    <select id="findHistoryOnceData" parameterType="java.util.Map" resultType="LocationDataVO">
        <![CDATA[
		   SELECT
              a.sensorPhysicalid    AS sensorPhysicalid,
              a.sensorPhysicalvalue As sensorPhysicalvalue,
              a.state               AS state,
              a.createtime          AS stamp,
              ABS(UNIX_TIMESTAMP(a.createtime) - #{timeSec}) AS delta
           FROM
              `${locationId}` AS a
           WHERE
              a.createtime>=#{startTime}
           AND
              a.createtime<=#{endTime}
           AND
              a.state = 1
           AND
              a.sensorPhysicalid = #{sensorPhysicalId}
           ORDER BY
              delta ASC
           LIMIT 1
        ]]>
    </select>

    <insert id="addUploadRecord" parameterType="java.util.Map">
        <![CDATA[
           INSERT INTO m_upload_files (filename, uploadTime)
            VALUES (#{filename},#{uploadTime}) ;
        ]]>
    </insert>

    <select id="isExistFileRecord" parameterType="java.util.Map" resultType="java.lang.Integer">
        <![CDATA[
            SELECT
              COUNT(1)
            FROM
              m_upload_files
            WHERE
              filename = #{filename}
        ]]>
    </select>

    <update id="updateUploadRecord" parameterType="java.util.Map">
        <![CDATA[
            UPDATE
              m_upload_files
            SET
              uploadTime = #{uploadTime},
              analysisSign = #{analysisSign}
            WHERE filename = #{filename}
        ]]>
    </update>

    <!-- 查询区域下设备实时状态 -->
    <select id="findLocationData" resultType="RealtimeDataVO"
            parameterType="java.lang.String">
       <![CDATA[
			SELECT
				n.id		AS locationId,
				n.nodeId    AS nodeId,
				n.locationName		AS locationName,
				m.lowvoltage	As lowvoltage,
				m.anomaly		AS anomaly,
  				m.deviceMode	AS deviceMode,
				z.zoneName		AS zoneName,
				n.zoneId      AS zoneId,
				m.stamp          AS stamp
			FROM
				m_location			AS n
			INNER JOIN
				m_nodeinfomemory	AS m ON m.nodeid = n.nodeid
			LEFT JOIN
				t_zone				AS z ON n.zoneId = z.zoneId
			WHERE
				n.id=#{locationId}
		GROUP BY n.id
		ORDER BY
			m.nodeid

        ]]>
	</select>

    <select id="findLocationByNodeId" resultType="LocationVO"
            parameterType="java.lang.String">
        <![CDATA[
          SELECT * FROM m_location m WHERE m.nodeId = #{value}
        ]]>
    </select>

    <select id="findLocationIdBySensorIdAndSiteId" parameterType="java.util.Map" resultType="java.lang.String">
        <![CDATA[
          SELECT
			  l.id
			FROM
				m_location l,
		         m_location_sensor  ns,
		         m_nodeinfomemory m
			WHERE
				l.siteId = ${siteId}
			AND
			l.id = ns.locationId
			AND
			l.nodeId=m.nodeid
			AND
			ns.sensorPhysicalId =${sensorPhysicalId}
			AND
			m.lowvoltage> -1
        ]]>
        <include refid="excludeLocations"/>
        <![CDATA[
          ORDER BY l.createTime DESC
			LIMIT 0,1
        ]]>
    </select>

    <select id="findLocationIdbySensorIdAndZoneId" parameterType="java.util.Map" resultType="java.lang.String">
        <![CDATA[
          SELECT
			  l.id
			FROM
				m_location l,
		         m_location_sensor  ns,
		         m_nodeinfo m
			WHERE
				l.zoneId = ${zoneId}
			AND
			l.id = ns.locationId
			AND
			l.nodeId=m.nodeid
			AND
			ns.sensorPhysicalId =${sensorPhysicalId}
			AND
			m.isActive=1
        ]]>
        <include refid="excludeLocations"/>
        <![CDATA[
            ORDER BY l.createTime DESC
			LIMIT 0,1
        ]]>
    </select>

    <select id="findDeviceByLocationId" parameterType="java.lang.String" resultType="DeviceVO">
        <![CDATA[
          SELECT
            mn.nodeType
          FROM
          m_location AS ml
          INNER JOIN m_nodeinfo AS mn
          ON ml.nodeid = mn.nodeid
          WHERE ml.id = #{value}
        ]]>
    </select>

    <select id="findHourAvgDatas" parameterType="java.util.Map" resultType="HourAvgDataPO">
         <![CDATA[
          SELECT
	        ma.id                   AS id,
	        ma.locationId           AS locationId,
	        ma.sensorPhysicalid     AS sensorPhysicalid,
	        ma.avgValue             AS avgValue,
	        ma.ms_datetime          AS msDatetime,
        	ma.isupdate             AS isupdate
          FROM
	        m_avgdata_hour ma
          WHERE
	        ma.locationId=#{locationId}
          AND
	        ma.sensorPhysicalid=#{sensorId}
          AND
	        ma.ms_datetime BETWEEN #{start} AND #{end}
	      ORDER BY
            ma.ms_datetime
          DESC
        ]]>
    </select>

    <select id="findYearAvgData" parameterType="java.lang.String" resultType="YearAvgDataVO">
        <![CDATA[
            SELECT
              nodeid          AS locationId,
               sensorPhysicalid AS sensorPhysicalid,
              MONTH(ms_date) AS mouth,
              ROUND(AVG(avgValue),2) AS val
            FROM m_avgdata
            WHERE
              YEAR(ms_date)=#{year}
              AND sensorPhysicalid = #{sensorId}
              AND nodeid = #{locationId}
            GROUP BY
              MONTH(ms_date)
        ]]>
    </select>

    <select id="findLocationsBySensorIdAndSiteId" parameterType="java.util.Map" resultType="LocationVO">
        <![CDATA[
             SELECT
              l.id                     AS id,
              l.locationName           AS locationName,
              l.nodeId                 AS nodeId,
              l.zoneId                 AS zoneId,
              l.siteId                 AS siteId,
              l.createTime             AS createTime,
              mn.sensorPhysicalid,
              mn.sensorPhysicalValue,
              mn.stamp,
              l.remark                 AS remark
            FROM
              m_location l LEFT JOIN m_nodesensor mn
              ON l.nodeId = mn.nodeid
            WHERE l.siteId = #{siteId}
            AND mn.sensorPhysicalid = #{sensorId}
        ]]>
        <include refid="excludeLocations"/>
    </select>

    <select id="findLocationsBySensorIdAndZoneId" parameterType="java.util.Map" resultType="LocationPO">
        <![CDATA[
             SELECT
              l.id                     AS id,
              l.locationName           AS locationName,
              l.nodeId                 AS nodeId,
              l.zoneId                 AS zoneId,
              l.siteId                 AS siteId,
              l.createTime             AS createTime,
              l.remark                 AS remark,
              l.lng                    AS lng,
              l.lat                    AS lat
            FROM
              m_location l LEFT JOIN m_location_sensor ls
              ON l.id = ls.locationId
            WHERE l.zoneId = #{zoneId}
            AND ls.sensorPhysicalid = #{sensorId}
            AND l.createTime BETWEEN #{begin} AND #{end}
        ]]>
        <include refid="excludeLocations"/>
    </select>

    <select id="findLocationSensorData" parameterType="java.util.Map" resultType="LocationDataPO">
        <![CDATA[
            SELECT
              #{locationId}       AS locationId,
              sensorPhysicalid    AS sensorId,
              sensorPhysicalvalue AS sensorPhysicalValue
            FROM `${locationId}` d
            WHERE d.sensorPhysicalid = #{sensorId}
                  AND d.createtime BETWEEN #{begin} AND #{end}
            ORDER BY CONVERT(sensorPhysicalValue, DECIMAL);
        ]]>
    </select>

    <select id="findLocationDataBySensor" parameterType="java.util.Map" resultType="LocationDate">
        <![CDATA[
            SELECT
              ml.`locationName` AS locationName,
              ml.`id` AS locationId,
              ms.`sensorPrecision` AS sensorPrecision,
              ROUND(AVG(md.`avgValue`), ms.`sensorPrecision`) AS avgValue,
              ROUND(MAX(md.`maxValue`), ms.`sensorPrecision`) AS `maxValue`,
              ROUND(MIN(md.`minValue`), ms.`sensorPrecision`) AS `minValue`,
              ROUND(MAX(md.`maxValue`) - MIN(md.`minValue`), ms.`sensorPrecision`) AS waveValue
            FROM
              m_avgdata md
              INNER JOIN m_location ml
                ON md.nodeid = ml.id
              LEFT JOIN m_sensorinfo ms
                ON md.`sensorPhysicalid` = ms.`sensorPhysicalid`
            WHERE ml.`zoneId` = #{zoneId}
              AND md.sensorPhysicalid = #{sensorId}
              AND md.`ms_date` BETWEEN #{startDate}
              AND #{endDate}
            GROUP BY ml.`id`;
        ]]>
    </select>

    <select id="findSensorValues" parameterType="java.util.Map" resultType="java.lang.Double">
        <![CDATA[
            SELECT
              sensorPhysicalvalue
            FROM
              `${locationId}`
            WHERE
             sensorPhysicalid = #{sensorId}
            AND
              createTime BETWEEN #{startDate}
              AND #{endDate}
            AND state = 1
            ORDER BY sensorPhysicalvalue + 0 ASC
        ]]>
    </select>
</mapper>